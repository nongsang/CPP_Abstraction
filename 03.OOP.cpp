#include <iostream>

using namespace std;

// 제작자 구현
typedef struct USERDATA
{
	int nAge;
	char szName[32];
} User;

void printData(const User& u)				// 굉장히 중요한 개념
{
	cout << "나이 : " << u.nAge << ", 이름 : " << u.szName << endl;
}

// 사용자 입력
int main()
{
	User u = { 20, "바보" };		// 구조체 초기화
	// cout << "나이 : " << u.nAge << ", 이름 : " << u.szName << endl;
	printData(u);				// 상당히 간결하다
}

// 5 ~ 9번째 줄
// 구조체 정의를 해주었을 뿐이다.

// 11 ~ 14번째 줄
// 파라미터가 const에 참조형으로 선언하였다.
// 함수 내에서 갑작스레 값이 수정이 되는 일을 const가 막아주며, 참조형으로 사용하여 메모리와 속도의 이점이 생긴다.
// 프로그래머가 미리 기능을 구현하였으며 사용자, 혹은 협업자가 간편하게 구조를 생각하지 않고 개발에 참여할 수 있게 해주어 생산성이 높아지는 기술이다.

// 19번째 줄
// 11번째 줄에서 정의한 함수를 사용하지 않을 경우 구조체의 멤버변수, 멤버함수를 사용하기 위해서 내부 구조를 파악해야 사용이 가능하다는 단점이 발생한다.
// u.nAge, u.szName이라는 멤버변수의 이름을 알아야 접근이 가능하다.

// 20번째 줄
// 11번째 줄에서 정의한 함수를 사용하여 데이터를 출력하였다.
// 구조체의 원소가 무엇인지 알 수 없으며 알지 않아도 기능을 사용하는 데에 전혀 문제가 없다.
// 이처럼 내부 구조를 알 수 없어도 Input이 있으면 원하는 Output을 낼 수 있게 구현하는 방식을 소프트웨어 공학에서는 '블랙박스'라고 한다.
// 내부 구조를 미리 만들어 놓고 간편하게 계층형태로 심해에서 기능만 꺼내 사용하는 방식은 '객체지향 프로그래밍'(Object Oriented Programmin, OOP)라고 한다.
// 이런 구조조 만든 것을 '인터페이스'라고 하며 역할을 하는 함수를 '인터페이스 함수'라고 부른다.
// 인터페이스 함수로 구조를 이루어 간편하게 구현할 수 있는 모음을 '프레임워크'라고 부른다.